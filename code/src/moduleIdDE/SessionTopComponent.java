/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package moduleIdDE;

import com.thoughtworks.xstream.XStream;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.idde.common.transport.Instruction;
import org.idde.common.model.InstructionProtocol;
import org.idde.common.view.SessionFrame;
import org.idde.editor.controller.SessionControl;
import org.idde.util.Database;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.ImageUtilities;
import org.idde.util.InputDialog;
import org.idde.util.Util;
import org.tmatesoft.sqljet.core.SqlJetException;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//moduleIdDE//Session//EN",
autostore = false)
public final class SessionTopComponent extends TopComponent
{

    private static SessionTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "SessionTopComponent";

    public SessionTopComponent()
    {
        initComponents();
        setName(NbBundle.getMessage(SessionTopComponent.class, "CTL_SessionTopComponent"));
        setToolTipText(NbBundle.getMessage(SessionTopComponent.class, "HINT_SessionTopComponent"));
        setIcon(ImageUtilities.loadImage("/resources/icons/sessionWindowIcon.png", true));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"No files are being shared yet", "Right click a contact to start sharing"},
                {"", ""},
                {"", ""},
                {"", ""}
            },
            new String [] {
                "Filename", "Shared with users"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setToolTipText(org.openide.util.NbBundle.getMessage(SessionTopComponent.class, "SessionTopComponent.jTable1.toolTipText")); // NOI18N
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jTable1MouseClicked
    {//GEN-HEADEREND:event_jTable1MouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3)
        {
            showRowPopUp(evt);
        }

    }//GEN-LAST:event_jTable1MouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized SessionTopComponent getDefault()
    {
        if (instance == null)
        {
            instance = new SessionTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the SessionTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized SessionTopComponent findInstance()
    {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null)
        {
            Logger.getLogger(SessionTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof SessionTopComponent)
        {
            return (SessionTopComponent) win;
        }
        Logger.getLogger(SessionTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType()
    {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened()
    {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed()
    {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p)
    {
        if (instance == null)
        {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID()
    {
        return PREFERRED_ID;
    }

    private void showRowPopUp(MouseEvent evt)
    {
        int row = jTable1.getSelectedRow();

        // If no item was selected
        if (row == -1)
        {
            JOptionPane.showMessageDialog(null, "No file selected! \nPlease select a row to see related options.", "IdDE - Information", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //
        JPopupMenu popup = new JPopupMenu("File: " + jTable1.getValueAt(row, 0));
        JMenuItem mi;

        final String fileName = jTable1.getValueAt(row, 0).toString();
        JLabel lblTitle = new JLabel(" File: " + fileName);
        lblTitle.setForeground(Color.blue);
        JPanel pnlTitle = new JPanel();
        pnlTitle.setBackground(Color.white);
        pnlTitle.add(lblTitle);

        popup.add(pnlTitle);
        popup.add(new JSeparator(), 1);

        // Send message to all users
        mi = new JMenuItem("Send chat message to all users");
        mi.setMnemonic(KeyEvent.VK_E);
        mi.addActionListener(
                new ActionListener()
                {

                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        String message = JOptionPane.showInputDialog(null, "Type in message to send:",
                                         "Send message to all users in session", JOptionPane.QUESTION_MESSAGE);

                        SessionControl.addMessageToBuffer(fileName, message);
//                        Logger.getLogger(this).debug("Aking to start shared editing session with "+
                    }
                });
        popup.add(mi);

        // Unjoin Menu Item
        mi = new JMenuItem("Leave this editing session");
        mi.setMnemonic(KeyEvent.VK_E);
        mi.addActionListener(
                new ActionListener()
                {

                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        String editMsg = "Are you sure you want to leave this session?";

                        if (JOptionPane.showConfirmDialog(null, editMsg, "IdDE - Confirmation", JOptionPane.YES_NO_OPTION) == 0)
                        {
                            // Send message to remote
                            // Used to convert object to xml string
                            XStream xstream = new XStream();
                            xstream.alias(InstructionProtocol.IdDE_ID, Instruction.class);

                            Instruction i = new Instruction(InstructionProtocol.MSG_EXIT_SHARING_FILE, fileName);

                            // Add message to buffer. SessionControl takes care to send it to other parties
                            SessionControl.addMessageToBuffer(fileName, xstream.toXML(i));

                            SessionControl.exitSharedEditing(fileName);
    //                        Logger.getLogger(this).debug("Aking to start shared editing session with "+
                        }
                    }
                });
        popup.add(mi);

        // View all changes made on this file
        mi = new JMenuItem("Show all changes made on this file");
        mi.setMnemonic(KeyEvent.VK_H);
        mi.addActionListener(
                new ActionListener()
                {

                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        try
                        {
                            Database.getSessionInstructions(fileName);
                        }
                        catch (SqlJetException ex)
                        {
                            Util.showErrorMessage("Error reading DB records: \n"+ex.getMessage());
//                            Exceptions.printStackTrace(ex);
                        }

                        SessionFrame sf = new SessionFrame(fileName);
                        sf.setVisible(true);


//                        Logger.getLogger(this).debug("Aking to start shared editing session with "+
                    }
                });
        popup.add(mi);


        // Send file to remote parties
        mi = new JMenuItem("Send my version to remote (All)");
        mi.setMnemonic(KeyEvent.VK_S);
        mi.addActionListener(
                new ActionListener()
                {

                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
//                        Logger.getLogger(this).debug("Aking to start shared editing session with "+
                    }
                });
        popup.add(mi);

        // Verify if users are still connected
        mi = new JMenuItem("Verify if users are still connected");
        mi.setMnemonic(KeyEvent.VK_V);
        mi.addActionListener(
                new ActionListener()
                {

                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
//                        Logger.getLogger(this).debug("Aking to start shared editing session with "+
                    }
                });
        popup.add(mi);

        // Show the menu
        popup.show(evt.getComponent(), evt.getX(), evt.getY());
    }

    public JTable getTable()
    {
        return jTable1;
    }

    /**
     * This method updates the table, getting data from SessionControl
     */
    public static void updateTableData()
    {
        Set sharedFiles = SessionControl.getSharedFiles();

        Iterator i = sharedFiles.iterator();
        String fileName;
        int row = 0;

        String data[][] = {};
        String col[] = {"File","Shared With"};

        DefaultTableModel model = new DefaultTableModel(data, col);
        JTable table = SessionTopComponent.getDefault().getTable();
        table.setModel(model);

//        SessionTopComponent.getDefault().getTable().getModel().setValueAt("Arquivo.java", row + 1, 0);
//        SessionTopComponent.getDefault().getTable().getModel().setValueAt(SessionControl.getSharedUsers("Arquivo.java"), row + 1, 1);

        while (i.hasNext())
        {
            fileName = (String) i.next();

            model.insertRow(row, new Object[]
                    {fileName, SessionControl.getSharedUsers(fileName)});

            row++;
        }

    }

}
