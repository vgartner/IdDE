/**
 * Connection panel.
 *
 * \b Package: \n
 * moduleIdDE
 *
 * @see org.idde.common.view
 * @see org.idde.common.view.ConnectionPannel
 *
 * @since Class created on 01/08/2010
 *
 * @author Vilson Cristiano Gartner [vgartner@gmail.com]
 *
 * \b Maintainers: \n
 * Vilson Cristiano Gartner [vgartner@gmail.com]
 *
 * \b License: \n
 * Licensed under BSD License {@link http://www.opensource.org/licenses/bsd-license.php}
 * Many ideas and code are based on shortalk {@link http://code.google.com/p/shortalk/}
 *
 * @version $Id$
 */
package moduleIdDE;

import java.util.logging.Logger;
import org.idde.chat.controller.DefaultController;
import org.idde.common.model.XMPPManager;
import org.idde.common.view.ConnectionPanel;
import org.idde.common.view.ContactListPanel;
import org.idde.common.view.MainPanel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.modules.ModuleInfo;
import org.netbeans.api.autoupdate.UpdateElement;
import org.netbeans.api.autoupdate.UpdateManager;
import org.netbeans.api.autoupdate.UpdateUnit;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//moduleIdDE//idde//EN",
autostore = false)
public final class iddeTopComponent extends TopComponent
{

    private static iddeTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "moduleIdDE/idde_check.png";
    private static final String PREFERRED_ID = "iddeTopComponent";
    private String[] args;
    private ConnectionPanel connectionPanel;
    private MainPanel mainPanel;
    private ContactListPanel contactListPanel;

    public iddeTopComponent()
    {
        initComponents();
        setName(NbBundle.getMessage(iddeTopComponent.class, "CTL_iddeTopComponent"));
        setToolTipText(NbBundle.getMessage(iddeTopComponent.class, "HINT_iddeTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        loadConnectionPane();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        mainScrollPane = new javax.swing.JScrollPane();

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JPanel pnlMain;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static String getVersionInfo(String codename)
    {
        // another way could be using org.openide.modules.ModuleInfo

        String rs="";

        for (UpdateUnit updateUnit : UpdateManager.getDefault().getUpdateUnits())
        {
            UpdateElement updateElement = updateUnit.getInstalled();
            if (updateElement != null)
            {
                if (codename.equals(updateElement.getCodeName()))
                {
                    rs += updateElement.getDisplayName()+ "\n";
                    rs += "Version: " + updateElement.getSpecificationVersion()+ "\n";
                }
            }
        }

        return rs;
    }

    public static synchronized iddeTopComponent getDefault()
    {
        if (instance == null)
        {
            instance = new iddeTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the iddeTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized iddeTopComponent findInstance()
    {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null)
        {
            Logger.getLogger(iddeTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof iddeTopComponent)
        {
            return (iddeTopComponent) win;
        }
        Logger.getLogger(iddeTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType()
    {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened()
    {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed()
    {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p)
    {
        if (instance == null)
        {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID()
    {
        return PREFERRED_ID;
    }

    private void loadConnectionPane()
    {


//        XMPPManager connectionManager = new XMPPManager();
//        XMPPConnection.DEBUG_ENABLED = true;
//
//        DefaultController controller = new DefaultController();
//        iddeMainFrame chatView = new iddeMainFrame(controller);
//
//        controller.addModel(connectionManager);
//
//        Runtime.getRuntime().addShutdownHook(new Shutdown(connectionManager));
//
//        chatView.setVisible(true);



        XMPPManager connectionManager = new XMPPManager();
//        XMPPConnection.DEBUG_ENABLED = true;

        DefaultController controller = new DefaultController();
//        iddeMainFrame chatView = new iddeMainFrame(controller);
        controller.addModel(connectionManager);

//        connectionPanel = new ConnectionPanel(controller);
//        mainScrollPane.setViewportView(connectionPanel);
//        controller.addView(connectionPanel);
//
//        contactListPanel = new ContactListPanel(controller);
//        controller.addView(contactListPanel);

        mainPanel = new MainPanel(controller);
        mainScrollPane.setViewportView(mainPanel);

        controller.addView(mainPanel);
    }
}
