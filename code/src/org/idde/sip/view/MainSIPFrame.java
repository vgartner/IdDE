/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainSIPFrame.java
 *
 * Created on 16/08/2010, 16:59:15
 */
package org.idde.sip.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.beans.PropertyChangeEvent;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.idde.chat.controller.Properties;
import org.idde.chat.view.AbstractViewPanel;
import org.idde.sip.peers.gui.EventManager;
import org.idde.sip.peers.gui.Registration;
import org.idde.sip.peers.Logger;
import org.idde.sip.peers.sip.Utils;
import org.idde.sip.peers.sip.syntaxencoding.SipUriSyntaxException;
import org.idde.sip.peers.sip.transport.SipRequest;
import org.idde.sip.peers.sip.transport.SipResponse;
//import org.idde.sip.model.SIPManager;

/**
 *
 * @author vilson
 */
public class MainSIPFrame extends AbstractViewPanel implements WindowListener, ActionListener
{

    private String status;

    private EventManager eventManager;
    private Registration registration;
    private Logger logger;

    /** Creates new form MainSIPFrame */
    public MainSIPFrame()
    {
//        doWork();
//        SwingUtilities.invokeLater(new Runnable()
//        {
//            public void run()
//            {
//                doWork();
//            }
//        });
        String peersHome = Utils.DEFAULT_PEERS_HOME;

        logger = new Logger(peersHome);

        registration = new Registration(statusLabel, logger);

        Thread thread = new Thread(new Runnable()
        {

            @Override
            public void run()
            {
                String peersHome = Utils.DEFAULT_PEERS_HOME;
//                eventManager = new EventManager(MainSIPFrame.this,
//                        peersHome, logger);
                try
                {
                    eventManager.register();
                }
                catch (SipUriSyntaxException e)
                {
                    statusLabel.setText(e.getMessage());
                }
            }
        });
        thread.start();

        try
        {
            while (eventManager == null)
            {
                Thread.sleep(50);
            }
        }
        catch (InterruptedException e)
        {
            return;
        }


    }
//
//    private void doWork()
//    {
//        Thread thread = new Thread(new Runnable()
//        {
//            public void run()
//            {
////                eventManager = new SIPManager(MainSIPFrame.this);
//            }
//        });
//        thread.start();
//
//        initComponents();
//    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        uri = new javax.swing.JTextField();
        actionButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();

        jLabel1.setText("Nr");

        actionButton.setText("Call");
        actionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionButtonActionPerformed(evt);
            }
        });

        statusLabel.setIcon(org.idde.common.view.StatusIcons.ICON_RED);
        statusLabel.setText("not registered");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uri, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                        .addGap(6, 6, 6)
                        .addComponent(actionButton))
                    .addComponent(statusLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(actionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(statusLabel))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void actionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_actionButtonActionPerformed
    {//GEN-HEADEREND:event_actionButtonActionPerformed
        String URI = uri.getText();

        if ( ! uri.toString().contains("sip:") )
        {
            URI = "sip:"+URI;
        }

        if ( ! uri.toString().contains("@sip.vgdata.net") )
        {
            URI = URI + "@sip.vgdata.net";
        }

        eventManager.callClicked(URI);
    }//GEN-LAST:event_actionButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actionButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextField uri;
    // End of variables declaration//GEN-END:variables

    @Override
    public void modelPropertyChange(PropertyChangeEvent evt)
    {
        // User has disconnected
        if (evt.getPropertyName().equals(Properties.AUTHENTICATED.toString()))
        {
            if (! (Boolean) evt.getNewValue())
            {
                // code here
            }
        }
    }

    public void windowOpened(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowClosing(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowClosed(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowIconified(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowDeiconified(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowActivated(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowDeactivated(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void actionPerformed(ActionEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setLabelText(String string)
    {
        this.statusLabel.setText(string);
    }

    public void setLabelIcon(Icon icon)
    {
        this.statusLabel.setIcon(icon);
    }

    public void setStatus(String status)
    {
        this.status = status;
    }

    public String getStatus()
    {
        return status;
    }

    public void registerFailed(SipResponse sipResponse)
    {
        registration.registerFailed();
    }

    public void registerSuccessful(SipResponse sipResponse)
    {
        registration.registerSuccessful();
    }

    public void registering(SipRequest sipRequest)
    {
        registration.registerSent();
    }

    public void socketExceptionOnStartup()
    {
        JOptionPane.showMessageDialog(null, "peers SIP port "
                + "unavailable, exiting");
        System.exit(1);
    }

}
