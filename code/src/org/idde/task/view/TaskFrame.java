/**
 * Task frame.
 *
 * \b Package: \n
 * org.idde.chat.view
 *
 * @see org.idde.chat
 * @see org.idde.chat.view
 *
 * @since Class created on 27/10/2010
 *
 * @author Vilson Cristiano Gartner [vgartner@gmail.com]
 *
 * \b Maintainers: \n
 * Vilson Cristiano Gartner [vgartner@gmail.com]
 *
 * \b License: \n
 * Licensed under BSD License {@link http://www.opensource.org/licenses/bsd-license.php}
 *
 * @version $Id$
 */
package org.idde.task.view;

import com.thoughtworks.xstream.XStream;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import org.idde.common.model.Contact;
import org.idde.common.model.XMPPManager;
import org.idde.common.transport.Instruction;
import org.idde.common.model.InstructionProtocol;
import org.idde.task.model.Task;
import org.idde.util.Database;
import org.idde.util.DateUtils;
import org.idde.util.Util;
import org.jivesoftware.smack.XMPPConnection;
import org.openide.util.Exceptions;
import org.tmatesoft.sqljet.core.SqlJetException;

/**
 *
 * @author  vilson
 */
public class TaskFrame extends javax.swing.JFrame
{
    private Contact contact = null;
    static String EDIT   = "edit";
    static String INSERT = "insert";
    static String REMOTE = "add_remote";

    private static final long serialVersionUID = -7266858009982252487L;
    private XMPPConnection connection;
    private String function;
    private Integer id;
    private TaskManagerFrame tmf;
    private String author;

    public TaskFrame()
    {
        initComponents();
    }

    public TaskFrame(Contact selectedContact)
    {
        contact = selectedContact;
        initComponents();
        lblRemoteUser.setText(contact.getNickName());
        this.author = contact.getNickName();
        this.function = REMOTE;
        lblRemoteUser.setToolTipText(contact.getName() +" - "+contact.getStatus());
    }

    /**
     * Contructor used to edit data
     * @param name
     * @param project
     * @param dateDue
     * @param priority
     * @param descr
     * @param author
     * @param id
     * @param tmf
     */
    TaskFrame(String name, String project, String dateDue, String priority, String descr, String author, int id, TaskManagerFrame tmf)
    {
        initComponents();

        // Set function, to do the correct operation on post
        function = EDIT;
        this.tmf = tmf;
        this.id  = id;
        this.author = author;

        lblTitle.setText("Edit Task");
        lblRemoteUser.setText("Author: "+author);
        btnPost.setText("Save Changes");

        java.util.Date date;

        String date_due = null;
        String time_due = null;

        try
        {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss.SSS");
            date = sdf.parse(dateDue);

            date_due = DateUtils.dateToString(date, DateUtils.FORMAT_DDMMYYYY_SLASHES);
            time_due = DateUtils.getTimeFromDate(date);
        }
        catch (ParseException ex)
        {
            Exceptions.printStackTrace(ex);
        }

        tfTaskName.setText(name);
        cbProject.setSelectedItem(project);
        cbPriority.setSelectedItem(priority);
        tfDueDate.setText(date_due);
        taFullDescription.setText(descr);
//        contact.setNickName(author);
    }

    /**
     * Contructor used to insert new tasks
     * @param tmf Instance of TaskManagerFrame to update tasks table.
     */
    public TaskFrame(TaskManagerFrame tmf)
    {
        initComponents();

        // Set function, to do the correct operation on post
        function = INSERT;
        this.tmf = tmf;
        this.author =  "Myself";

        lblTitle.setText("Insert New Task");
        lblRemoteUser.setText(null);
        btnPost.setText("Save New Task");
    }

    void setFunction(String func)
    {
        function = func;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnPost = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        tfTaskName = new javax.swing.JTextField();
        cbProject = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        taFullDescription = new javax.swing.JTextArea();
        cbPriority = new javax.swing.JComboBox();
        tfDueDate = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblRemoteUser = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setTitle("IdDE - Task");

        jLabel4.setText(org.openide.util.NbBundle.getMessage(TaskFrame.class, "TaskFrame.jLabel4.text")); // NOI18N

        jLabel6.setText(org.openide.util.NbBundle.getMessage(TaskFrame.class, "TaskFrame.jLabel6.text")); // NOI18N

        btnPost.setText(org.openide.util.NbBundle.getMessage(TaskFrame.class, "TaskFrame.jButton1.text")); // NOI18N
        btnPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPostActionPerformed(evt);
            }
        });

        jLabel5.setText(org.openide.util.NbBundle.getMessage(TaskFrame.class, "TaskFrame.jLabel5.text")); // NOI18N

        tfTaskName.setText(org.openide.util.NbBundle.getMessage(TaskFrame.class, "TaskFrame.tfTaskName.text")); // NOI18N
        tfTaskName.setToolTipText("Task name");

        cbProject.setEditable(true);
        cbProject.setToolTipText("Inform the project");

        taFullDescription.setColumns(20);
        taFullDescription.setRows(5);
        taFullDescription.setToolTipText("Enter the full description of the task");
        jScrollPane1.setViewportView(taFullDescription);

        cbPriority.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Lowest", "Low", "High", "Highest" }));

        tfDueDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        tfDueDate.setText(org.openide.util.NbBundle.getMessage(TaskFrame.class, "TaskFrame.tfDueDate.text")); // NOI18N
        tfDueDate.setToolTipText("This task must be finished before this date");

        jLabel7.setText(org.openide.util.NbBundle.getMessage(TaskFrame.class, "TaskFrame.jLabel7.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(TaskFrame.class, "TaskFrame.jLabel3.text")); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblTitle.setText(org.openide.util.NbBundle.getMessage(TaskFrame.class, "TaskFrame.jLabel1.text")); // NOI18N

        lblRemoteUser.setText(org.openide.util.NbBundle.getMessage(TaskFrame.class, "TaskFrame.lblRemoteUser.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 258, Short.MAX_VALUE)
                .addComponent(lblRemoteUser)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(lblRemoteUser))
                .addContainerGap())
        );

        jLabel2.setText("( Format: dd/mm/yyyy )");

        jLabel8.setText("Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfTaskName)
                    .addComponent(cbProject, 0, 238, Short.MAX_VALUE))
                .addGap(152, 152, 152))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbPriority, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(151, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addComponent(btnPost)
                .addContainerGap(151, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfTaskName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbProject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbPriority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPost)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPostActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPostActionPerformed
    {//GEN-HEADEREND:event_btnPostActionPerformed
        if ( function.equalsIgnoreCase(EDIT))
        {
            updateTask();
            return;
        }
        else if ( function.equalsIgnoreCase(INSERT))
        {
            insertTask();
            return;
        }


        sendTaskToRemote();
        Util.showInformationMessage("Task was sent to remote user. <br/>You will be notified if it was accepted or rejected.");
        this.setVisible(false);
}//GEN-LAST:event_btnPostActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPost;
    private javax.swing.JComboBox cbPriority;
    private javax.swing.JComboBox cbProject;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblRemoteUser;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextArea taFullDescription;
    private javax.swing.JFormattedTextField tfDueDate;
    private javax.swing.JTextField tfTaskName;
    // End of variables declaration//GEN-END:variables

    private void sendTaskToRemote()
    {
        Task t = createTaskObject();

        // Used to convert object to xml string
        XStream xstream = new XStream();
        xstream.alias(InstructionProtocol.IdDE_ID, Instruction.class);
        xstream.alias("task", Task.class);

        Instruction i = new Instruction(InstructionProtocol.MSG_ADD_TASK, xstream.toXML(t));

        String mesg =  xstream.toXML(i);

        // Verify if message should be encoded
        if (XMPPManager.getDoEncode())
        {
            try
            {
                mesg = Util.encodeBase64(mesg, XMPPManager.getEncodeCharSet());
            }
            catch (UnsupportedEncodingException ex)
            {
                Util.showErrorMessage("Error preparing instruction:\n"+ex.getMessage());
//                Exceptions.printStackTrace(ex);
            }
        }

        connection = XMPPManager.getConnection();

        org.jivesoftware.smack.packet.Message message = new org.jivesoftware.smack.packet.Message();
        message.setType(org.jivesoftware.smack.packet.Message.Type.chat);
        message.setFrom( connection.getUser());
//        message.addBody("en", xstream.toXML(i) );
//        message.setBody(xstream.toXML(i));
        message.setBody(mesg);
        message.setTo(this.contact.getName());

        connection.sendPacket(message);

//            ChatMessage msg = new ChatMessage();
//            msg.setTo(this.participant);
//            msg.setMessage(sendTextArea.getText());
//            controller.sendMessage(msg);


//        XMPPManager.sendMessage(message);
    }

    private void updateTask()
    {
        Task t = createTaskObject();

        if ( t == null )
        {
            return;
        }

        t.setId(id);

        try
        {
            Database.updateTask(t);
            Util.showInformationMessage("Task was updated.");
            tmf.updateTableData();
        }
        catch (SqlJetException ex)
        {
            Util.showErrorMessage("Error updating record ("+ t.getId().toString() +"): " + ex.getMessage());
        }
    }

    private void insertTask()
    {
        Task t = createTaskObject();

        if ( t == null )
        {
            return;
        }
        try
        {
            Database.insertTask(t);
            Util.showInformationMessage("Task has been created.");
            tmf.updateTableData();
        }
        catch (SqlJetException ex)
        {
            Util.showErrorMessage(ex.getMessage());
        }
    }

    /**
     * Create new object based on inputed data
     * @return Task object
     */
    private Task createTaskObject()
    {
        Task t = new Task();

        try
        {
            t.setDateDue(Util.formatDateTime_ddMMyyyy(tfDueDate.getText()));
        }
        catch (Exception ex)
        {
            Exceptions.printStackTrace(ex);
        }

        t.setName(tfTaskName.getText());
        t.setProject(cbProject.getSelectedItem().toString());
        t.setPriority(cbPriority.getSelectedItem().toString());
        t.setDescription(taFullDescription.getText());
        t.setUserSent(this.author);

        return t;
    }

}
