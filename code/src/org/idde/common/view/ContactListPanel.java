/**
 * Contact list panel.
 *
 * \b Package: \n
 * org.idde.chat.view
 *
 * @see org.idde.chat
 * @see org.idde.chat.view
 *
 * @since Class created on 04/10/2010
 *
 * @author Vilson Cristiano Gartner [vgartner@gmail.com]
 *
 * \b Maintainers: \n
 * Vilson Cristiano Gartner [vgartner@gmail.com]
 *
 * \b License: \n
 * Licensed under BSD License {@link http://www.opensource.org/licenses/bsd-license.php}
 * Many ideas and code are based on shortalk {@link http://code.google.com/p/shortalk/}
 *
 * @version $Id$
 */
package org.idde.common.view;

import com.thoughtworks.xstream.XStream;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;

import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.text.Document;
import javax.swing.text.JTextComponent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.idde.agenda.view.AppointmentFrame;
import org.idde.chat.controller.DefaultController;
import org.idde.chat.controller.Properties;
import org.idde.util.Logger;
import org.idde.common.model.Contact;
import org.idde.chat.model.ChatMessage;
import org.idde.common.model.XMPPManager;
import org.idde.chat.view.ChatFrame;
import org.idde.common.transport.Instruction;
import org.idde.common.model.InstructionProtocol;
import org.idde.common.transport.InstructionEvaluator;
import org.idde.fileManager.controller.TransferFile;
import org.idde.task.view.TaskFrame;
import org.idde.util.Util;
import org.idde.video.JMotionGuard;
import org.jivesoftware.smack.packet.Presence;
import org.jivesoftware.smack.packet.Presence.Mode;
import org.openide.util.Exceptions;

/**
 *
 */
public class ContactListPanel extends org.idde.chat.view.AbstractViewPanel implements ActionListener
{

    public static Contact selectedContact;
    private static final long serialVersionUID = 1554138350565726355L;

    /** Creates new form contactListPanel */
    public ContactListPanel(DefaultController ctr)
    {
        controller = ctr;
        chats = new HashSet<ChatFrame>();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contactListTree = new javax.swing.JTree();

        contactListTree.setCellRenderer(new ContactListCellRenderer());
        contactListTree.setModel(getContactListTreeModel());
        contactListTree.setRootVisible(false);
        contactListTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contactListTreeMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contactListTree, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contactListTree, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void contactListTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contactListTreeMouseClicked

        Contact contact = null;
        try
        {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) contactListTree.getPathForLocation(evt.getPoint().x, evt.getPoint().y).getLastPathComponent();
            contact = (Contact) node.getUserObject();
        }
        catch (Exception e)
        {
            // Exception can occur if panel is empty, so ignore
            return;
        }

        if (evt.getClickCount() == 2)
        {
            try
            {
                openChat(contact);
            }
            catch (ClassCastException e)
            {
            }
        }
        else
        {
            if (evt.getButton() == MouseEvent.BUTTON2)
            {
                Logger.getLogger(this).debug("Button pressed: BUTTON2");
            }
            else
            {
                if (evt.getButton() == MouseEvent.BUTTON3)
                {
                    Logger.getLogger(this).debug("Button pressed: BUTTON3");

                    showContactPopupMenu(contact, evt);
                }
            }
        }

    }//GEN-LAST:event_contactListTreeMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree contactListTree;
    // End of variables declaration//GEN-END:variables

    @Override
    public void modelPropertyChange(PropertyChangeEvent evt)
    {
//        Logger.getLogger(this).debug("[Debug] modelPropertyChange: " + evt.getPropertyName() + " from: " + evt.getOldValue() + " to:" + evt.getNewValue());

        if (evt.getPropertyName().equals(Properties.MESSAGE_IN.toString()))
        {
            ChatMessage chatMsg = (ChatMessage) evt.getNewValue();
            String msg;
            Boolean isInstruction = false;

            // Verify if message is encoded
            // If so, decode it to verify if it is a coded (IdDE) message
            if (XMPPManager.getDoEncode())
            {
                try
                {
                    // Decode message
                    msg = Util.decodeBase64(chatMsg.getMessage(), XMPPManager.getEncodeCharSet());

                    // Verify if it is an instruction
                    isInstruction = msg.contains("<"+InstructionProtocol.IdDE_ID+">");

                    // If it's an instruction, set decoded message to chatMsg
                    if (isInstruction)
                    {
                        chatMsg.setMessage(msg);
                    }
                    else // If it's not an instruction, than it's a regular xmpp message
                    {
                        msg = chatMsg.getMessage();
                    }

                }
                catch (UnsupportedEncodingException ex)
                {
                    Exceptions.printStackTrace(ex);
                    msg = chatMsg.getMessage();
                }
            }
            else // if not encoded enabled, consider as plain message
            {
                msg = chatMsg.getMessage();

                // Verify if it is an instruction
                isInstruction = msg.contains(InstructionProtocol.IdDE_ID);
            }


            // If an istruction message was received, analise it
            if (isInstruction)
            {
//                org.jivesoftware.smack.packet.Message mesg = (org.jivesoftware.smack.packet.Message) evt.getNewValue();
//                org.jivesoftware.smack.packet.Message.Type type = mesg.getType();
//                Logger.getLogger(this).debug("[Debug] Smack message: " + mesg.getType() +
//                                             "\n From" + mesg.getFrom() + "\n "  +mesg.getBody() );

                if (chatMsg.getSmackMessage().getType().equals(org.jivesoftware.smack.packet.Message.Type.error))
                {
                    Logger.getLogger(this).error("[ERROR] Error message received!");
                    JOptionPane.showMessageDialog(null, "Message wasn't sent to: " + chatMsg.getFrom().getName() + "\n" + msg, "IdDE - ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
//                mesg.setType(org.jivesoftware.smack.packet.Message.Type.chat);
                // verify if it is an error message
//                if ( mesg.getType().equals( org.jivesoftware.smack.packet.Message.Type.error ) )
//                {
//                    Logger.getLogger(this).debug("[Error] Received error response: " + mesg.getError().getMessage() );
//                    Logger.getLogger(this).debug("[Debug] Sending again...");
//
//                    // TODO se for uma mensagem de erro, mandar somente para esse usu'ario
//
//
//                }
//                else // Process received message
                {
//                    Logger.getLogger(this).debug("[Debug] Received CODE string: " + chatMsg.getMessage());

                    String strOriginal = chatMsg.getMessage();
                    String strFinal = strOriginal.replace("&lt;", "<");
                    strFinal = strFinal.replace("&gt;" , ">");

//                    chatMsg.setMessage(strFinal);
//                    Logger.getLogger(this).debug("[Debug] Formated message: " + chatMsg.getMessage());

                    processMessage(chatMsg);
                }
            }
            // else, continue opening chat
            else
            {
                ChatFrame chat = getChat(chatMsg.getFrom());

                chat.receivedMessage(chatMsg);
                chat.setVisible(true);
            }
        }
        else
        {
            if (evt.getPropertyName().equals(Properties.CONTACT_ADD.toString()))
            {

                Contact contact = (Contact) evt.getNewValue();

                Logger.getLogger(this).debug("Adding contact " + contact.getName() + "(" + contact.getStatus() + ") in group " + contact.getGroup());

                //Add group
                DefaultMutableTreeNode group = getGroupNode(contact.getGroup());
                if (group == null)
                {
                    group = new DefaultMutableTreeNode(contact.getGroup(), true);
                    getContactListTreeModel().insertNodeInto(group, getContactListTreeRootNode(), getContactListTreeRootNode().getChildCount());
                }

                //Add Contact
                Enumeration enumeration = group.children();
                while (enumeration.hasMoreElements())
                {
                    DefaultMutableTreeNode groupMember = (DefaultMutableTreeNode) enumeration.nextElement();
                    if (groupMember.getUserObject().equals(contact))
                    {
                        return;
                    }
                }
                getContactListTreeModel().insertNodeInto((new DefaultMutableTreeNode(contact, false)), group, group.getChildCount());

            }
            else
            {
                if (evt.getPropertyName().equals(Properties.CONTACT_PRESENCE.toString()))
                {

                    Contact contact = (Contact) evt.getNewValue();
                    DefaultMutableTreeNode contactNode = getContactNode(contact);
                    if (contactNode != null)
                    {
                        ((Contact) contactNode.getUserObject()).setAvailable(contact.isAvailable());
                        ((Contact) contactNode.getUserObject()).setStatus(contact.getStatus());
                    }
                    else
                    {
                        Logger.getLogger(this).debug("Contact node " + contact.getName() + " doesn't exist in contact list, cannot update presence.");
//                        firePropertyChange(Properties.CONTACT_ADD.toString(), null, contact);
//
                    }

                    contactListTree.repaint();

                }
                else
                {
                    if (evt.getPropertyName().equals(Properties.AUTHENTICATED.toString()))
                    {
                        if ((Boolean) evt.getNewValue())
                        {
//                            Presence presence = new Presence(Presence.Type.available);
//                            presence.setType(Presence.Type.available);
//                            presence.setMode(Mode.available);
//                            presence.setStatus(InstructionProtocol.STATUS_CHAT_IdDE_ID);
//
//                            XMPPManager.getConnection().sendPacket(presence);

                            controller.loadContactList();
                        }
                        else
                        {
                            reinit();
                        }
                    }
                    else
                    {
                        if (evt.getPropertyName().equals(Properties.CONNECTED.toString()))
                        {
                            if (!(Boolean) evt.getNewValue())
                            {
                                reinit();
                            }
                        }
                    }
                }
            }
        }
    }

    public void reinitPublic()
    {
        reinit();
    }

    @SuppressWarnings("unchecked")
    private void reinit()
    {
        Logger.getLogger(this).debug("[Debug] reinit: Cleaning contact list ...");
        Util.setStatus("Cleaning contact list...");
        Enumeration enumeration = getContactListTreeRootNode().children();

        while (enumeration.hasMoreElements())
        {
            DefaultMutableTreeNode group = (DefaultMutableTreeNode) enumeration.nextElement();
            getContactListTreeModel().removeNodeFromParent(group);
        }

        Logger.getLogger(this).debug("[Debug] Closing chatFrame...");

        synchronized (chats)
        {
            for (ChatFrame chat : chats)
            {
                chat.setVisible(false);
            }

            chats.clear();
        }

    }

    @SuppressWarnings("unchecked")
    private DefaultMutableTreeNode getGroupNode(String groupName)
    {
        Logger.getLogger(this).debug("[Debug] getGroupName - groupName: " + groupName);

        Enumeration enumeration = contactListTreeRootNode.children();

        while (enumeration.hasMoreElements())
        {
            DefaultMutableTreeNode group = (DefaultMutableTreeNode) enumeration.nextElement();

            if (group.getUserObject().equals(groupName) && group.getAllowsChildren())
            {
                return group;
            }
        }

        return null;
    }

    @SuppressWarnings("unchecked")
    private DefaultMutableTreeNode getContactNode(Contact contact)
    {
        Logger.getLogger(this).debug("[Debug] getContactNode - contact: " + contact);

        Enumeration groupEnumeration = contactListTreeRootNode.children();

        while (groupEnumeration.hasMoreElements())
        {
            DefaultMutableTreeNode group = (DefaultMutableTreeNode) groupEnumeration.nextElement();
            Enumeration contactEnumeration = group.children();

            while (contactEnumeration.hasMoreElements())
            {
                DefaultMutableTreeNode contactNode = (DefaultMutableTreeNode) contactEnumeration.nextElement();

                if (((Contact) contactNode.getUserObject()).equals(contact))
                {
                    return contactNode;
                }
            }
        }
        return null;
    }

    private DefaultMutableTreeNode getContactListTreeRootNode()
    {
        Logger.getLogger(this).debug("[Debug] getContactListTreeRootNode - contactListTreeRootNode: " + contactListTreeRootNode);

        if (contactListTreeRootNode == null)
        {
            contactListTreeRootNode = new DefaultMutableTreeNode("root");
        }

        return contactListTreeRootNode;
    }

    private DefaultTreeModel getContactListTreeModel()
    {
        Logger.getLogger(this).debug("[Debug] getContactListTreeModel - contactListTreeModel: " + contactListTreeModel);

        if (contactListTreeModel == null)
        {
            contactListTreeModel = new DefaultTreeModel(getContactListTreeRootNode());
            contactListTreeModel.addTreeModelListener(new TreeModelListener()
            {

                public void treeNodesChanged(TreeModelEvent e)
                {
                }

                public void treeNodesRemoved(TreeModelEvent e)
                {
                }

                public void treeStructureChanged(TreeModelEvent e)
                {
                }

                public void treeNodesInserted(TreeModelEvent e)
                {
                    contactListTree.expandPath(e.getTreePath());
                    setPreferredSize(contactListTree.getMaximumSize());
                }
            });
        }

        return contactListTreeModel;
    }

    public ChatFrame getChat(Contact contact)
    {

        Contact ct = new Contact(contact.getName().replaceFirst("/.*$", ""));
        ChatFrame chat;

        synchronized (chats)
        {

            for (ChatFrame c : chats)
            {
                if (c.getParticipant().equals(contact))
                {
                    if (c == null)
                    {
                        c = new ChatFrame(contact, controller);
                    }
                    return c;
                }
            }

            Logger.getLogger(this).debug("Creating new ChatFrame ...");

            chat = new ChatFrame(ct, controller);
            this.chats.add(chat);

        }

        return chat;

    }
    //Other variables
    private DefaultController controller;
    private DefaultMutableTreeNode contactListTreeRootNode;
    private DefaultTreeModel contactListTreeModel;
    private Set<ChatFrame> chats;

    private void showContactPopupMenu(Contact contact, MouseEvent evt)
    {
        // Update my presence status message
        // This is a workaround. Sometimes status appears as not connected.
        // TODO: verify possible statuses
        Presence presence = new Presence(Presence.Type.available);
        presence.setType(Presence.Type.available);
        presence.setMode(Mode.available);
        presence.setStatus(InstructionProtocol.STATUS_CHAT_IdDE_ID);

        XMPPManager.getConnection().sendPacket(presence);

        // Add to static context, to access
        ContactListPanel.selectedContact = contact;

        JPopupMenu popup = new JPopupMenu("Contact: " + contact.getNickName());
        JMenuItem mi;

//        JLabel lblContact = new JLabel("     " + contact.getNickName() + ": " + contact.getStatus());
//        lblContact.setFont(new Font("Serif", Font.BOLD,11 ));

        JLabel lblTitle = new JLabel("     " + contact.getNickName() + ": " + contact.getStatus());
        lblTitle.setForeground(Color.blue);
        JPanel pnlTitle = new JPanel();
        pnlTitle.setBackground(Color.white);
        pnlTitle.add(lblTitle);

        popup.add(pnlTitle);
        popup.add(new JSeparator(), 1);

        // <Netbeans only>
        // TODO Refactoring to a method wich returns the file name, no matter which IDE
        JTextComponent lastFocusedComponent = org.netbeans.api.editor.EditorRegistry.lastFocusedComponent();
        Document doc = null;
        String fileContent = null;

        try
        {
            doc = lastFocusedComponent.getDocument();
            fileContent = doc.getText(0, doc.getLength());
        }
        catch (Exception e)
        {
            // If exception, no document open.
            // So can't share
            mi = new JMenuItem("No document is open. Nothing to share.");
            mi.setMnemonic(KeyEvent.VK_F);
            mi.setEnabled(false);
            mi.setToolTipText("If you want to share a file, you need first to open it in Netbeans");
            popup.add(mi);
        }

        String filePath = null;
        String fileName = null;

        if (doc != null)
        {
            filePath = (String) doc.getProperty(Document.TitleProperty);
            fileName = filePath.substring(1 + filePath.lastIndexOf(File.separatorChar));

            if (fileName.indexOf(" ") > 0)
            {
                fileName = fileName.substring(0, fileName.indexOf(" "));
            }

        }
        // </Netbeans only>

        if (fileName != null)
        {
            final String fName = fileName;
            final String fContent = fileContent;
            // fileName = "Obtain File Name";

            // Share Document Menu Item
            mi = new JMenuItem("Invite to share " + fName);
            mi.setToolTipText("Select this option if you want to start a collaborative session with remote user "+ContactListPanel.selectedContact.getNickName());
            mi.setMnemonic(KeyEvent.VK_F);
            mi.addActionListener(
                    new ActionListener()
                    {

                        @Override
                        public void actionPerformed(ActionEvent e)
                        {
                            Logger.getLogger(this).debug("Aking to start shared editing session with "
                                    + ContactListPanel.selectedContact.getNickName()
                                    + " (" + ContactListPanel.selectedContact.getName()
                                    + ")");
                            askStartEditingSession(selectedContact, fName, fContent);
                        }
                    });
            popup.add(mi);
        }
        // text Chat Menu Item
        mi = new JMenuItem("Start Text Chat");
        mi.setMnemonic(KeyEvent.VK_C);

        // http://zerioh.tripod.com/ressources/menu.html
        mi.addActionListener(
                new ActionListener()
                {

                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        Logger.getLogger(this).debug("Starting Chat with "
                                + ContactListPanel.selectedContact.getNickName()
                                + " (" + ContactListPanel.selectedContact.getName()
                                + ")");
                        openChat(selectedContact);
                    }
                });
        popup.add(mi);

        //menu.addSeparator();

        // Voice call subenu
        JMenu submenu = new JMenu("Voice Call");
        submenu.setMnemonic(KeyEvent.VK_V);

        mi = new JMenuItem("SIP Call");
        mi.setMnemonic(KeyEvent.VK_S);
        mi.addActionListener(
                new ActionListener()
                {

                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        Logger.getLogger(this).debug("Starting Voice call with "
                                + ContactListPanel.selectedContact.getNickName()
                                + " (" + ContactListPanel.selectedContact.getName()
                                + ")");
//                        org.idde.sip.peers.gui.MainFrameOriginal frame = new org.idde.sip.peers.gui.MainFrameOriginal();
                        requestRemoteData(selectedContact, InstructionProtocol.MSG_GET_SIP);
                    }
                });
        submenu.add(mi);

        mi = new JMenuItem("Call Mobile Phone");
        mi.setMnemonic(KeyEvent.VK_M);
        mi.addActionListener(
                new ActionListener()
                {

                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        Logger.getLogger(this).debug("Starting Mobile call with "
                                + ContactListPanel.selectedContact.getNickName()
                                + " (" + ContactListPanel.selectedContact.getName()
                                + ")");

                        requestRemoteData(selectedContact, InstructionProtocol.MSG_GET_MOBILE);
//                        org.idde.sip.peers.gui.MainFrameOriginal frame = new org.idde.sip.peers.gui.MainFrameOriginal();
                    }
                });
        submenu.add(mi);

        mi = new JMenuItem("Call Landline Phone");
        mi.setMnemonic(KeyEvent.VK_L);
        mi.addActionListener(
                new ActionListener()
                {

                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        Logger.getLogger(this).debug("Starting landline call with "
                                + ContactListPanel.selectedContact.getNickName()
                                + " (" + ContactListPanel.selectedContact.getName()
                                + ")");
                        requestRemoteData(selectedContact, InstructionProtocol.MSG_GET_LANDLINE);
//                        org.idde.sip.peers.gui.MainFrameOriginal frame = new org.idde.sip.peers.gui.MainFrameOriginal();
                    }
                });
        submenu.add(mi);

        popup.add(submenu);

        // Voice call subenu
        submenu = new JMenu("Video");
        submenu.setMnemonic(KeyEvent.VK_V);

        mi = new JMenuItem("Capture");
        mi.setMnemonic(KeyEvent.VK_S);
        mi.addActionListener(
                new ActionListener()
                {

                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        Logger.getLogger(this).debug("opening video "
                                + ContactListPanel.selectedContact.getNickName()
                                + " (" + ContactListPanel.selectedContact.getName()
                                + ")");

	JMotionGuard jmg = new JMotionGuard();

	jmg.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
//      videoPanel.closePlayer();
      }});
                    }
                });
        submenu.add(mi);
        
        // Add submenu
        popup.add(submenu);

        // Task Management
        submenu = new JMenu("Task");
        submenu.setMnemonic(KeyEvent.VK_T);

        mi = new JMenuItem("Send new task for this user");
        mi.setMnemonic(KeyEvent.VK_A);
        mi.addActionListener(
                new ActionListener()
                {

                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        Logger.getLogger(this).debug("Adding new task for "
                                + ContactListPanel.selectedContact.getNickName()
                                + " (" + ContactListPanel.selectedContact.getName()
                                + ")");

                        TaskFrame tp = new TaskFrame(ContactListPanel.selectedContact);
                        tp.setVisible(true);
                        //org.idde.sip.peers.gui.MainFrame frame = new org.idde.sip.peers.gui.MainFrame();
                    }
                });
        submenu.add(mi);

        mi = new JMenuItem("View user's tasks");
        mi.setMnemonic(KeyEvent.VK_V);
        mi.addActionListener(
                new ActionListener()
                {

                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        Logger.getLogger(this).debug("Viewing tasks for "
                                + ContactListPanel.selectedContact.getNickName()
                                + " (" + ContactListPanel.selectedContact.getName()
                                + ")");

                        requestRemoteData(selectedContact, InstructionProtocol.MSG_GET_TASKS);
                        //org.idde.sip.peers.gui.MainFrame frame = new org.idde.sip.peers.gui.MainFrame();
                    }
                });
        submenu.add(mi);
        popup.add(submenu);

        // Agenda
        submenu = new JMenu("Agenda");
        submenu.setMnemonic(KeyEvent.VK_T);

        mi = new JMenuItem("Add new appointment for this user");
        mi.addActionListener(
                new ActionListener()
                {
                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        Logger.getLogger(this).debug("Adding new task for "
                                + ContactListPanel.selectedContact.getNickName()
                                + " (" + ContactListPanel.selectedContact.getName()
                                + ")");

                        AppointmentFrame af = new AppointmentFrame(ContactListPanel.selectedContact);
                        af.setVisible(true);
                    }
                });
        submenu.add(mi);

        mi = new JMenuItem("View user's appointments");
        mi.setMnemonic(KeyEvent.VK_V);
        mi.addActionListener(
                new ActionListener()
                {
                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        Logger.getLogger(this).debug("Asking to see appointments of "
                                + ContactListPanel.selectedContact.getNickName()
                                + " (" + ContactListPanel.selectedContact.getName()
                                + ")");
                        requestRemoteData(selectedContact, InstructionProtocol.MSG_GET_AGENDA);
                        //org.idde.sip.peers.gui.MainFrame frame = new org.idde.sip.peers.gui.MainFrame();
                    }
                });
        submenu.add(mi);
        popup.add(submenu);

        // send file Menu Item
        mi = new JMenuItem("Send file");
        mi.setMnemonic(KeyEvent.VK_C);

        mi.addActionListener(
                new ActionListener()
                {
                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                //                        TransferFile ft = new TransferFile();
                        File openFile = TransferFile.openFile();

                        Logger.getLogger(this).debug("Sending file to "
                                + ContactListPanel.selectedContact.getNickName()
                                + " (" + ContactListPanel.selectedContact.getName()
                                + ")");

                        // TODO: refactoring
                        // Used to convert object to xml string
                        XStream xstream = new XStream();
                        xstream.alias(InstructionProtocol.IdDE_ID, Instruction.class);

                        Instruction i = new Instruction(InstructionProtocol.MSG_SEND_FILE, openFile.getName(), openFile.getAbsolutePath());
                        sendInstruction(selectedContact, xstream.toXML(i));
                    }
                });
        popup.add(mi);

        // send file Menu Item
        mi = new JMenuItem("Query User's App Version");
        mi.setMnemonic(KeyEvent.VK_C);

        mi.addActionListener(
                new ActionListener()
                {
                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        requestRemoteData(selectedContact, InstructionProtocol.MSG_GET_APPVERSION);
                    }
                });
        popup.add(mi);

        popup.show(evt.getComponent(), evt.getX(), evt.getY());
    }

    @Override
    public void actionPerformed(ActionEvent e)
    {
        JMenuItem source = (JMenuItem) (e.getSource());
        System.out.println("Opção selecionada: " + source.getText());

        String s = "Menu Item source: " + source.getText()
                + " (an instance of " + getClassName(source) + ")";
        //jtAreaOutput.append(s + "\n");
        //jtAreaOutput.setCaretPosition(jtAreaOutput.getDocument()
        //		.getLength());
    }

    protected String getClassName(Object o)
    {
        String classString = o.getClass().getName();
        int dotIndex = classString.lastIndexOf(".");
        return classString.substring(dotIndex + 1); // Returns only Class name
    }

    private void sendInstruction(Contact contact, String instruction)
    {
        // Send message
        System.out.print("[ContactListPanel.sendmessage] Sending instruction to: " + contact.getName() + "\n");

        ChatFrame chat = getChat(contact);
        chat.doSendInstruction(instruction);
    }

    private void openChat(Contact contact)
    {
        ChatFrame chat = getChat(contact);
        chat.setVisible(true);
        chat.requestFocus();
    }

    /**
     * Compose the instruction and call the method to send the message to contact
     *
     * @param contact Remote to send message to
     * @param fileName File name which is wanted to share
     */
    private void askStartEditingSession(Contact contact, String fileName, String fileContent)
    {
        // Used to convert object to xml string
        XStream xstream = new XStream();
        xstream.alias(InstructionProtocol.IdDE_ID, Instruction.class);

        Instruction i = new Instruction(InstructionProtocol.MSG_START_SHARING_FILE, fileName, fileContent);

        sendInstruction(contact, xstream.toXML(i));

        JOptionPane.showMessageDialog(null, "Asking remote to join a shared editing session on \"" + fileName + "\"\nPlease do NOT change this file until you receive an answer.",
                "IdDE - Shared editing", 1);
    }

    private void processMessage(ChatMessage msg)
    {
        InstructionEvaluator me = new InstructionEvaluator();
        me.processMessage(msg, this);
    }

    /**
     * Send a text message to remote user
     * @param message Message to be sent
     * @param contact Remote user
     */
    public void sendTextMessage(String message, Contact contact)
    {
        ChatMessage reply = new ChatMessage();
        reply.setTo(contact);
        reply.setMessage(message);
        controller.sendMessage(reply);
    }

    /**
     *
     * @param text
     * @param contact
     */
    public void sendInstructionMessage(String text, Contact contact)
    {
        ChatMessage reply = new ChatMessage();
        reply.setTo(contact);

        String message;

        // Verify if message should be encoded
        if (XMPPManager.getDoEncode())
        {
            try
            {
                message = Util.encodeBase64(text, XMPPManager.getEncodeCharSet());
            }
            catch (UnsupportedEncodingException ex)
            {
                Exceptions.printStackTrace(ex);
                message = text;
            }
        }
        else
        {
            message = text;
        }

//        Logger.getLogger(this).debug("[Debug] Reply to " + contact + ": " + text);

        reply.setMessage(message);
        controller.sendMessage(reply);
    }

    private void requestRemoteData(Contact contact, String instruction)
    {
        // Used to convert object to xml string
        XStream xstream = new XStream();
        xstream.alias(InstructionProtocol.IdDE_ID, Instruction.class);

        Instruction i = new Instruction(instruction);

        sendInstruction(contact, xstream.toXML(i));
    }
}
