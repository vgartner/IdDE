/**
 * Connection pannel.
 *
 * \b Package: \n
 * org.idde.chat.view
 *
 * @see org.idde.chat
 * @see org.idde.chat.view
 *
 * @since Class created on 04/10/2010
 *
 * @author Vilson Cristiano Gartner [vgartner@gmail.com]
 *
 * \b Maintainers: \n
 * Vilson Cristiano Gartner [vgartner@gmail.com]
 *
 * \b License: \n
 * Licensed under BSD License {@link http://www.opensource.org/licenses/bsd-license.php}
 * Many ideas and code are based on shortalk {@link http://code.google.com/p/shortalk/}
 *
 * @version $Id$
 */
package org.idde.common.view;

import java.beans.PropertyChangeEvent;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;

import org.idde.chat.controller.DefaultController;
import org.idde.common.model.XMPPManager;
import org.idde.chat.view.AbstractViewPanel;
import org.idde.sip.peers.Config;
import org.idde.sip.peers.sip.RFC3261;
import org.idde.sip.peers.sip.syntaxencoding.SipURI;
import org.idde.sip.peers.sip.syntaxencoding.SipUriSyntaxException;
import org.idde.util.Database;
import org.idde.util.Logger;
import org.idde.util.Util;
import org.openide.util.Exceptions;

public class ConnectionPanel extends AbstractViewPanel
{

    private static final long serialVersionUID = 3026519607367354093L;
    private MainPanel mainPanel;

    /** Creates new form ConnectionPanel
     * @param controller
     */
    public ConnectionPanel(DefaultController controller)
    {
        this.controller = controller;
        initComponents();

        init();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        tabbedPane = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfServerTextFieldXMPP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        loginTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        tfXMPPPort = new javax.swing.JTextField();
        tfXMPPResource = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        chkSASL = new javax.swing.JCheckBox();
        sipPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        tfSIPServer = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tfSIPsipLogin = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        tfSIPPassword = new javax.swing.JPasswordField();
        tfSIPPort = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        tfProxySIP = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        chkEncodeMessage = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        tfMobile = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        tfLandline = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        tfMsgBuff = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        cbCharset = new javax.swing.JComboBox();
        chkASCII = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        chkLogOnDB = new javax.swing.JCheckBox();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jTextField1.setText("jTextField1");

        setPreferredSize(new java.awt.Dimension(230, 450));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/user-icon.png"))); // NOI18N

        connectButton.setText("Login");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/pipca.gif"))); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 1, 18));
        jLabel7.setForeground(new java.awt.Color(153, 0, 0));
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/pipca_small.png"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel7))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel5))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(jLabel6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(connectButton, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                        .addGap(75, 75, 75)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(connectButton)
                .addGap(92, 92, 92))
        );

        tabbedPane.addTab("Main", jPanel3);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("XMPP Settings"));

        jLabel1.setText("Server");

        tfServerTextFieldXMPP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfServerTextFieldXMPPFocusLost(evt);
            }
        });

        jLabel2.setText("Username");

        jLabel3.setText("Password");

        passwordField.setText("jPasswordField1");

        jLabel13.setText("Port");

        jLabel14.setText("Resource");

        chkSASL.setText("Use SASL Auth");
        chkSASL.setToolTipText("Enable to use SASL authentication (Gtalk=false, Facebook=true)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)))
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkSASL)
                    .addComponent(tfXMPPResource, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(loginTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(tfServerTextFieldXMPP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(passwordField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(tfXMPPPort, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfServerTextFieldXMPP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(loginTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfXMPPPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfXMPPResource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkSASL)
                .addContainerGap())
        );

        sipPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("SIP Settings"));

        jLabel8.setText("Server");

        jLabel9.setText("Username");

        jLabel10.setText("Password");

        tfSIPPassword.setText("jPasswordField1");

        jLabel15.setText("Port");

        jLabel18.setText("Proxy");

        tfProxySIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfProxySIPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sipPanelLayout = new javax.swing.GroupLayout(sipPanel);
        sipPanel.setLayout(sipPanelLayout);
        sipPanelLayout.setHorizontalGroup(
            sipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sipPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel15)
                    .addComponent(jLabel10)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfSIPPort, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfSIPsipLogin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(tfSIPPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(tfSIPServer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(tfProxySIP, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))
                .addContainerGap())
        );
        sipPanelLayout.setVerticalGroup(
            sipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sipPanelLayout.createSequentialGroup()
                .addGroup(sipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(tfSIPServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSIPsipLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(8, 8, 8)
                .addGroup(sipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSIPPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSIPPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(sipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfProxySIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sipPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(sipPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        jTabbedPane2.addTab("Accounts", jPanel6);

        chkEncodeMessage.setText("Use encoded messages (Base64)");
        chkEncodeMessage.setToolTipText("Enable this if you are using talk.google.com server");
        chkEncodeMessage.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkEncodeMessage.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkEncodeMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEncodeMessageActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Phone Numbers"));

        jLabel11.setText("Mobile");

        jLabel12.setText("Landline");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfLandline, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(tfMobile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(tfMobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfLandline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel16.setText("Messages Buffer");

        tfMsgBuff.setText("0");
        tfMsgBuff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfMsgBuffActionPerformed(evt);
            }
        });

        jLabel17.setText("Encoding Charset");

        cbCharset.setEditable(true);
        cbCharset.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "UTF-8", "ISO-8859-1", "US-ASCII", " " }));

        chkASCII.setText("Allow only ASCII chars ");
        chkASCII.setToolTipText("Enable this if you have trouble with non ASCII chars.\nIt's specially useful when you are sharing file between \nWindows and Linux.");
        chkASCII.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkASCIIActionPerformed(evt);
            }
        });

        jLabel4.setText("sec");

        chkLogOnDB.setText("Log changes to DB");
        chkLogOnDB.setToolTipText("Enable this if you have trouble with non Ascii chars");
        chkLogOnDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLogOnDBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkLogOnDB)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfMsgBuff, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addComponent(chkASCII)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                            .addComponent(jLabel17)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbCharset, 0, 0, Short.MAX_VALUE))
                        .addComponent(chkEncodeMessage, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chkEncodeMessage)
                .addGap(7, 7, 7)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(cbCharset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(tfMsgBuff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkASCII)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkLogOnDB)
                .addContainerGap(160, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Behavior", jPanel7);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Settings", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleName("IdDE - Login");
    }// </editor-fold>//GEN-END:initComponents

    private void chkEncodeMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEncodeMessageActionPerformed
    }//GEN-LAST:event_chkEncodeMessageActionPerformed

    private void init()
    {
        connectButton.setVisible(false);

        try
        {
            // Verify and, if necessary, create files and directories
            Util.verifyHomeDirectory(true);
            Util.verifyLogDirectory(true);
            Util.verifyConfigDirectory(true);
            Util.verifyPeersConfigFile(true);
            Util.verifyConfigFile(true);

            // Load settings from properties' file
            loadSettings();
        }
        catch (ConfigurationException e)
        {
            Logger.getLogger(this).error("[Error] Cannot create/open configuration file : " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Load settings from default properties file
     * @throws ConfigurationException
     */
    private void loadSettings() throws ConfigurationException
    {
        propertiesConfig = new PropertiesConfiguration(Util.configFile);
        propertiesConfig.setLogger(Logger.getLogger(propertiesConfig.getClass()));

        // XMPP settings
        tfServerTextFieldXMPP.setText(propertiesConfig.getString("server_xmpp"));
        loginTextField.setText(propertiesConfig.getString("login_xmpp"));
        passwordField.setText(propertiesConfig.getString("pass_xmpp"));
        tfXMPPPort.setText(propertiesConfig.getString("port_xmpp"));
        tfXMPPResource.setText(propertiesConfig.getString("resource_xmpp"));

        // SIP settings
        tfSIPServer.setText(propertiesConfig.getString("server_sip"));
        tfSIPsipLogin.setText(propertiesConfig.getString("login_sip"));
        tfSIPPassword.setText(propertiesConfig.getString("pass_sip"));
        tfSIPPort.setText(propertiesConfig.getString("port_sip"));

        // Phone numbers
        tfMobile.setText(propertiesConfig.getString("mobile"));
        tfLandline.setText(propertiesConfig.getString("landline"));

        // Other settings
        tfMsgBuff.setText(propertiesConfig.getString("msg_buffer"));

        String compress = propertiesConfig.getString("encode_msg");
        if (compress != null && compress.toLowerCase().equals("true"))
        {
            chkEncodeMessage.setSelected(true);
        }
        else
        {
            chkEncodeMessage.setSelected(false);
        }

        String logToDB = propertiesConfig.getString("log_db");
        if ( logToDB != null && logToDB.toLowerCase().equals("true") )
        {
            chkLogOnDB.setSelected(true);
        }
        else
        {
            chkLogOnDB.setSelected(false);
        }



        cbCharset.setSelectedItem(propertiesConfig.getString("encode_charset"));
    }

    private void tfMsgBuffActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tfMsgBuffActionPerformed
    {//GEN-HEADEREND:event_tfMsgBuffActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfMsgBuffActionPerformed

    private void chkASCIIActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkASCIIActionPerformed
    {//GEN-HEADEREND:event_chkASCIIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkASCIIActionPerformed

    private void chkLogOnDBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkLogOnDBActionPerformed
    {//GEN-HEADEREND:event_chkLogOnDBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkLogOnDBActionPerformed

    private void tfServerTextFieldXMPPFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_tfServerTextFieldXMPPFocusLost
    {//GEN-HEADEREND:event_tfServerTextFieldXMPPFocusLost
        if (tfServerTextFieldXMPP.getText().equals("talk.google.com"))
        {
            chkEncodeMessage.setSelected(true);
        }
    }//GEN-LAST:event_tfServerTextFieldXMPPFocusLost

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_connectButtonActionPerformed
    {//GEN-HEADEREND:event_connectButtonActionPerformed
        privateConnect();
    }//GEN-LAST:event_connectButtonActionPerformed

    private void tfProxySIPActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tfProxySIPActionPerformed
    {//GEN-HEADEREND:event_tfProxySIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfProxySIPActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbCharset;
    private javax.swing.JCheckBox chkASCII;
    private javax.swing.JCheckBox chkEncodeMessage;
    private javax.swing.JCheckBox chkLogOnDB;
    private javax.swing.JCheckBox chkSASL;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField loginTextField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JPanel sipPanel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextField tfLandline;
    private javax.swing.JTextField tfMobile;
    private javax.swing.JTextField tfMsgBuff;
    private javax.swing.JTextField tfProxySIP;
    private javax.swing.JPasswordField tfSIPPassword;
    private javax.swing.JTextField tfSIPPort;
    private javax.swing.JTextField tfSIPServer;
    private javax.swing.JTextField tfSIPsipLogin;
    private javax.swing.JTextField tfServerTextFieldXMPP;
    private javax.swing.JTextField tfXMPPPort;
    private javax.swing.JTextField tfXMPPResource;
    // End of variables declaration//GEN-END:variables
    //Other variables
    private DefaultController controller;
    private PropertiesConfiguration propertiesConfig;

    private void saveSettings()
    {
        Logger.getLogger(this).debug("[Debug] Saving settings...");
        Util.setStatus("IdDE: Saving settings...");

        try
        {
            // Save XMPP settings
            propertiesConfig.setProperty("server_xmpp", tfServerTextFieldXMPP.getText());
            propertiesConfig.setProperty("login_xmpp", loginTextField.getText());
            propertiesConfig.setProperty("pass_xmpp", new String(passwordField.getPassword()));
            propertiesConfig.setProperty("port_xmpp", tfXMPPPort.getText());
            propertiesConfig.setProperty("resource_xmpp", tfXMPPResource.getText());

            saveSIPConfig();
            // Save SIP settings
            propertiesConfig.setProperty("server_sip", tfSIPServer.getText());
            propertiesConfig.setProperty("login_sip", tfSIPsipLogin.getText());
            propertiesConfig.setProperty("pass_sip", new String(tfSIPPassword.getPassword()));
            propertiesConfig.setProperty("port_sip", tfSIPPort.getText());

            // Save phone numbers
            propertiesConfig.setProperty("mobile", tfMobile.getText());
            propertiesConfig.setProperty("landline", tfLandline.getText());

            //Other settings
            propertiesConfig.setProperty("msg_buffer", tfMsgBuff.getText());

            String compressStr;
            if (chkEncodeMessage.isSelected())
            {
                compressStr = "true";
            }
            else
            {
                compressStr = "false";
            }
            propertiesConfig.setProperty("encode_msg", compressStr);

            String logToDB;
            if (chkLogOnDB.isSelected())
            {
                logToDB = "true";
            }
            else
            {
                logToDB = "false";
            }
            propertiesConfig.setProperty("log_db", logToDB);

            propertiesConfig.setProperty("encode_charset", cbCharset.getSelectedItem());

            propertiesConfig.save();
        }
        catch (ConfigurationException e)
        {
            Logger.getLogger(this).error("[Error] Error saving settings");
            e.printStackTrace();
        }
    }

    @Override
    public void modelPropertyChange(PropertyChangeEvent evt)
    {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void doConnect(MainPanel mainPanel)
    {
        this.mainPanel = mainPanel;
        privateConnect();
    }

    private void privateConnect()
    {
        if (cbCharset.getSelectedItem() == null)
        {
            cbCharset.setSelectedItem("UTF-8");
        }

        tabbedPane.setSelectedIndex(0);
        connectButton.setEnabled(false);
        mainPanel.getProgressBar().setVisible(true);

        if (chkLogOnDB.isSelected())
        {
            try
            {
                Database.initables();
            }
            catch (Exception ex)
            {
                chkLogOnDB.setSelected(false);
                Util.showErrorMessage("Logging do DB disabled (collaborative editing)! \nError initializaing DB:\n"+ex.getMessage() + "\n" + ex.toString());
//                ex.printStackTrace();
            }
        }

        XMPPManager.setDoEncode(chkEncodeMessage.isSelected());
        XMPPManager.setOnlyAscii(chkASCII.isSelected());
        XMPPManager.setUseSASL(chkSASL.isSelected());
        XMPPManager.setResource(tfXMPPResource.getText());

        if ( tfXMPPPort.getText().isEmpty() )
        {
            tfXMPPPort.setText("5222");
        }
        
        XMPPManager.setPort( Integer.parseInt(tfXMPPPort.getText()) );
        Database.setDisableLogInstruction(!chkLogOnDB.isSelected());

        String encodingCharSet = cbCharset.getSelectedItem().toString();
        XMPPManager.setEncodeCharSet(encodingCharSet);

        // Save settings
        saveSettings();

        Thread task = new Thread()
        {

            @Override
            public void run()
            {
                Util.setStatus("IdDE: Connecting...");
                controller.changeServer(tfServerTextFieldXMPP.getText());

                // this was used to guarantee (force) alfa versions to be updated ;-)
                /*
                Calendar today = Calendar.getInstance();
                today.setTime(new Date());

                Calendar lim = Calendar.getInstance();
                try
                {
                    lim.setTime(Util.formatDate_ddMMyyyy("04/12/2011"));
                }
                catch (Exception ex)
                {
                    Exceptions.printStackTrace(ex);
                }

                if (today.after(lim))
                {
                    try
                    {
                        Thread.sleep(5000);
                    }
                    catch (InterruptedException e)
                    {
                    }

                    JOptionPane.showMessageDialog(null, "Severe Exception - Code 271. Unable to connect! :-(\nPlease contact me at: vgartner@gmail.com", "IdDE - Fatal Error", JOptionPane.ERROR_MESSAGE);
                    mainPanel.getProgressBar().setVisible(false);
                    connectButton.setEnabled(true);
                    return;
                }
                //
                 */

                try
                {
                    Thread.sleep(500);
                }
                catch (InterruptedException e)
                {
                }

                controller.login(loginTextField.getText(), new String(passwordField.getPassword()));
                mainPanel.getProgressBar().setVisible(false);
                connectButton.setEnabled(true);
            }
        };

        task.start();
    }

    private void saveSIPConfig()
    {
        Config config = Util.getSIPConfig();

        String userpart = tfSIPsipLogin.getText();
        if (userpart != null)
        {
            config.setUserPart(userpart);
        }

        String sipPort = tfSIPPort.getText();
        if ( sipPort != null)
        {
            config.setSipPort(Integer.parseInt(sipPort));
        }

        String domain = tfSIPServer.getText();
        if (domain != null)
        {
            config.setDomain(domain);
        }
        char[] password = tfSIPPassword.getPassword();

        if (password != null && password.length > 0)
        {
            config.setPassword(new String(password));
        }

        String outboundProxy = tfProxySIP.getText();

        if (outboundProxy != null)
        {
            SipURI sipURI;
            try
            {
                if ("".equals(outboundProxy.trim()))
                {
                    config.setOutboundProxy(null);
                }
                else
                {
                    if (!outboundProxy.startsWith(RFC3261.SIP_SCHEME))
                    {
                        outboundProxy = RFC3261.SIP_SCHEME
                                + RFC3261.SCHEME_SEPARATOR + outboundProxy;
                    }
                    sipURI = new SipURI(outboundProxy);
                    config.setOutboundProxy(sipURI);
                }
            }
            catch (SipUriSyntaxException e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage());
                Util.getPeersLogger().error("SIP URI syntax issue", e);
                
                return;
            }
        }
        config.save();


    }
}
