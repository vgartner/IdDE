/**
 * MainPanel
 *
 * \b Package: \n
 * org.idde.common.view
 *
 * @see org.idde.common
 * @see org.idde.common.view
 *
 * @since Class created on 04/10/2010
 *
 * @author Vilson Cristiano Gartner [vgartner@gmail.com]
 *
 * \b Maintainers: \n
 * Vilson Cristiano Gartner [vgartner@gmail.com]
 *
 * \b License: \n
 * Licensed under BSD License {@link http://www.opensource.org/licenses/bsd-license.php}
 * Many ideas and code are based on shortalk {@link http://code.google.com/p/shortalk/}
 *
 * @version $Id$
 */
package org.idde.common.view;

import java.awt.FlowLayout;
import java.beans.PropertyChangeEvent;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import org.idde.agenda.view.AppointmentManagerFrame;

import org.idde.chat.controller.DefaultController;

import org.idde.chat.controller.Properties;
import org.idde.common.model.XMPPManager;
import org.idde.chat.view.AbstractViewPanel;
import org.idde.task.view.TaskManagerFrame;
import org.idde.util.Util;
import org.jivesoftware.smack.packet.Presence;

/**
 *
 * @author  remy
 */
public class MainPanel extends AbstractViewPanel
{

    /**
     *
     */
    private static final long serialVersionUID = 986537474922412872L;
    java.util.ResourceBundle bundle;

    /** 
     * Creates new form mainPanel
     * @param controllerXMPP
     */
    public MainPanel(DefaultController controller)
    {
        this.controller = controller;
        bundle = org.idde.util.ResourceManager.getBundle();
        initComponents();
        btnDisconnect.setVisible(false);
        btnReloadContactList.setEnabled(false);
        btnTaskMgr.setEnabled(false);
        btnAgendaMgr.setEnabled(false);
        jProgressBar.setVisible(false);
        init();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        statusBarPane = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        mainScrollPane = new javax.swing.JScrollPane();
        scrolledMainPanel = new javax.swing.JPanel();
        jToolBar = new javax.swing.JToolBar();
        btnConnect = new javax.swing.JButton();
        btnDisconnect = new javax.swing.JButton();
        btnReloadContactList = new javax.swing.JButton();
        btnTaskMgr = new javax.swing.JButton();
        btnAgendaMgr = new javax.swing.JButton();
        btnAbout = new javax.swing.JButton();
        jProgressBar = new javax.swing.JProgressBar();
        SIPPanel = new javax.swing.JPanel();
        lblSIPStatus = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setPreferredSize(new java.awt.Dimension(240, 480));

        statusBarPane.setBorder(javax.swing.BorderFactory.createTitledBorder("XMPP:"));
        statusBarPane.setPreferredSize(new java.awt.Dimension(294, 27));

        statusLabel.setIcon(org.idde.common.view.StatusIcons.ICON_RED);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/idde/lang/Bundle"); // NOI18N
        statusLabel.setText(bundle.getString("DISCONNECTED")); // NOI18N

        javax.swing.GroupLayout statusBarPaneLayout = new javax.swing.GroupLayout(statusBarPane);
        statusBarPane.setLayout(statusBarPaneLayout);
        statusBarPaneLayout.setHorizontalGroup(
            statusBarPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusBarPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addContainerGap())
        );
        statusBarPaneLayout.setVerticalGroup(
            statusBarPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
        );

        mainScrollPane.setPreferredSize(new java.awt.Dimension(233, 403));

        scrolledMainPanel.setPreferredSize(new java.awt.Dimension(230, 450));

        javax.swing.GroupLayout scrolledMainPanelLayout = new javax.swing.GroupLayout(scrolledMainPanel);
        scrolledMainPanel.setLayout(scrolledMainPanelLayout);
        scrolledMainPanelLayout.setHorizontalGroup(
            scrolledMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 230, Short.MAX_VALUE)
        );
        scrolledMainPanelLayout.setVerticalGroup(
            scrolledMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );

        mainScrollPane.setViewportView(scrolledMainPanel);

        jToolBar.setRollover(true);

        btnConnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/connect.gif"))); // NOI18N
        btnConnect.setToolTipText("Connect");
        btnConnect.setFocusable(false);
        btnConnect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnConnect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });
        jToolBar.add(btnConnect);

        btnDisconnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/disconnect.gif"))); // NOI18N
        btnDisconnect.setToolTipText("Disconnect");
        btnDisconnect.setFocusable(false);
        btnDisconnect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDisconnect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDisconnect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDisconnectMouseClicked(evt);
            }
        });
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });
        jToolBar.add(btnDisconnect);

        btnReloadContactList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/reload.png"))); // NOI18N
        btnReloadContactList.setToolTipText("Reload contact list");
        btnReloadContactList.setFocusable(false);
        btnReloadContactList.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReloadContactList.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnReloadContactList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnReloadContactListMouseClicked(evt);
            }
        });
        btnReloadContactList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadContactListActionPerformed(evt);
            }
        });
        jToolBar.add(btnReloadContactList);

        btnTaskMgr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/task.png"))); // NOI18N
        btnTaskMgr.setToolTipText("Open task manager");
        btnTaskMgr.setEnabled(false);
        btnTaskMgr.setFocusable(false);
        btnTaskMgr.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTaskMgr.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTaskMgr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaskMgrActionPerformed(evt);
            }
        });
        jToolBar.add(btnTaskMgr);

        btnAgendaMgr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/agenda.png"))); // NOI18N
        btnAgendaMgr.setToolTipText("Open agenda manager");
        btnAgendaMgr.setEnabled(false);
        btnAgendaMgr.setFocusable(false);
        btnAgendaMgr.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAgendaMgr.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAgendaMgr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgendaMgrActionPerformed(evt);
            }
        });
        jToolBar.add(btnAgendaMgr);

        btnAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/help.png"))); // NOI18N
        btnAbout.setToolTipText("About IdDE");
        btnAbout.setFocusable(false);
        btnAbout.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAbout.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAbout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAboutMouseClicked(evt);
            }
        });
        jToolBar.add(btnAbout);

        jProgressBar.setIndeterminate(true);
        jToolBar.add(jProgressBar);

        SIPPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("SIP:"));

        lblSIPStatus.setIcon(org.idde.common.view.StatusIcons.ICON_RED);
        lblSIPStatus.setText("not registered");
        lblSIPStatus.setAlignmentX(0.5F);

        javax.swing.GroupLayout SIPPanelLayout = new javax.swing.GroupLayout(SIPPanel);
        SIPPanel.setLayout(SIPPanelLayout);
        SIPPanelLayout.setHorizontalGroup(
            SIPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SIPPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSIPStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(130, Short.MAX_VALUE))
        );
        SIPPanelLayout.setVerticalGroup(
            SIPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblSIPStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(SIPPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(statusBarPane, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
            .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusBarPane, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SIPPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDisconnectMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnDisconnectMouseClicked
    {//GEN-HEADEREND:event_btnDisconnectMouseClicked

    }//GEN-LAST:event_btnDisconnectMouseClicked

    private void btnAboutMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnAboutMouseClicked
    {//GEN-HEADEREND:event_btnAboutMouseClicked
        String version = moduleIdDE.iddeTopComponent.getVersionInfo("moduleIdDE");
        JOptionPane.showMessageDialog(null, version+ "Author: Vilson C. Gärtner <vilson@gartner.net.br>\n", "About IdDE", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnAboutMouseClicked

    private void btnReloadContactListMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnReloadContactListMouseClicked
    {//GEN-HEADEREND:event_btnReloadContactListMouseClicked

    }//GEN-LAST:event_btnReloadContactListMouseClicked

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDisconnectActionPerformed
    {//GEN-HEADEREND:event_btnDisconnectActionPerformed
//        Util.setStatus("IdDE: Disconnecting...");
//        XMPPManager.getInstance().disconnect();
        getController().disconnect();
//        contactListPanel.publicReinit();
//        mainScrollPane.setViewportView(connectionPanel);
//
//        XMPPManager.getConnection().disconnect(new Presence(Presence.Type.unavailable));
//        firePropertyChange(Properties.CONNECTED.toString(), null, false);
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void btnReloadContactListActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnReloadContactListActionPerformed
    {//GEN-HEADEREND:event_btnReloadContactListActionPerformed
        getController().loadContactList();
        contactListPanel.reinitPublic();
        Util.setStatus("IdDE: Reloading contact list...");

    }//GEN-LAST:event_btnReloadContactListActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnConnectActionPerformed
    {//GEN-HEADEREND:event_btnConnectActionPerformed
        Util.setStatus("IdDE: Connecting...");
        connectionPanel.doConnect(this);
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnTaskMgrActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnTaskMgrActionPerformed
    {//GEN-HEADEREND:event_btnTaskMgrActionPerformed
        TaskManagerFrame tmf = new TaskManagerFrame();
        tmf.setVisible(true);
    }//GEN-LAST:event_btnTaskMgrActionPerformed

    private void btnAgendaMgrActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAgendaMgrActionPerformed
    {//GEN-HEADEREND:event_btnAgendaMgrActionPerformed
        AppointmentManagerFrame amf = new AppointmentManagerFrame();
        amf.setVisible(true);
    }//GEN-LAST:event_btnAgendaMgrActionPerformed

    private void init()
    {
        connectionPanel = new ConnectionPanel(controller);
        mainScrollPane.setViewportView(connectionPanel);
        controller.addView(connectionPanel);

        contactListPanel = new ContactListPanel(controller);
        controller.addView(contactListPanel);
    }

    @Override
    public void modelPropertyChange(PropertyChangeEvent evt)
    {

        //Connection Events
        if (evt.getPropertyName().equals("SIPConnection"))
        {
            System.out.println("******\n******\n******\n******\n  **** Model property Change:  " + evt.getPropertyName() + evt.getNewValue());
        }

        if (evt.getPropertyName().equals(Properties.CONNECTED.toString()))
        {
            if ((Boolean) evt.getNewValue())
            {
                //Update status bar
                statusLabel.setText(bundle.getString("CONNECTED"));
                statusLabel.setIcon(StatusIcons.ICON_YELLOW);
            }
            else
            {
                //Update status bar
                statusLabel.setText(bundle.getString("DISCONNECTED"));
                statusLabel.setIcon(StatusIcons.ICON_RED);

                //Display connection parameters
                mainScrollPane.setViewportView(connectionPanel);
            }
        }
        else
        {
            if (evt.getPropertyName().equals(Properties.AUTHENTICATED.toString()))
            {
                if ((Boolean) evt.getNewValue())
                {
                    //Update status bar
                    statusLabel.setText(bundle.getString("AUTHENTICATED"));
                    statusLabel.setIcon(StatusIcons.ICON_GREEN);

                    //Display contact list
                    mainScrollPane.setViewportView(contactListPanel);

                    // Display toolbar
                    btnConnect.setVisible(false);
                    btnDisconnect.setVisible(true);
                    btnReloadContactList.setEnabled(true);
                    btnTaskMgr.setEnabled(true);
                    btnAgendaMgr.setEnabled(true);

                    // SIP
//                    org.idde.sip.view.MainSIPFrame frame = new org.idde.sip.view.MainSIPFrame();
                    org.idde.sip.peers.gui.MainSIPFrame frame = new org.idde.sip.peers.gui.MainSIPFrame();
                    
//                    SIPScroll.setViewportView(frame);
                    SIPPanel.remove(lblSIPStatus);
                    SIPPanel.setLayout(new FlowLayout());
                    SIPPanel.add(frame.getMainPanel());
//                    controller.addView(frame);

                    lblSIPStatus.setText(frame.getStatus());

//                    if (frame.getStatus().equals(SIPManager.STATUS_REGISTERED))
//                    {
//                        lblSIPStatus.setIcon(StatusIcons.ICON_GREEN);
//                    }
//                    else
//                    {
//                        lblSIPStatus.setIcon(StatusIcons.ICON_YELLOW);
//                    }

                }
                else
                {
                    //Update status bar
                    statusLabel.setText(bundle.getString("NOT_AUTHENTICATED"));
                    statusLabel.setIcon(StatusIcons.ICON_YELLOW);

                    //Display connection parameters
                    mainScrollPane.setViewportView(connectionPanel);

                    // Enable/disable toolbar buttons
                    btnConnect.setVisible(true);
                    btnDisconnect.setVisible(false);
                    btnReloadContactList.setEnabled(false);
                    btnTaskMgr.setEnabled(false);
                    btnAgendaMgr.setEnabled(false);
                }
            }
        }
    }

    public DefaultController getController()
    {
        return controller;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel SIPPanel;
    private javax.swing.JButton btnAbout;
    private javax.swing.JButton btnAgendaMgr;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnReloadContactList;
    private javax.swing.JButton btnTaskMgr;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JToolBar jToolBar;
    private javax.swing.JLabel lblSIPStatus;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JPanel scrolledMainPanel;
    private javax.swing.JPanel statusBarPane;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
    //Other variables
    private DefaultController controller;
    private ConnectionPanel connectionPanel;
    private ContactListPanel contactListPanel;

    public JProgressBar getProgressBar()
    {
        return jProgressBar;
    }
    //End
}
